Super duper config

Put =(org-babel-load-file (expand-file-name "~/dotfiles/config/emacs/init.org"))= to =~/.emacs.d/init.el=

* General settings
** Sort words function
#+begin_src emacs-lisp
    (defun sort-words (reverse beg end)
      "Sort words in region alphabetically, in REVERSE if negative.
    Prefixed with negative \\[universal-argument], sorts in reverse.
  
    The variable `sort-fold-case' determines whether alphabetic case
    affects the sort order.
  
    See `sort-regexp-fields'."
      (interactive "*P\nr")
      (sort-regexp-fields reverse "\\w+" "\\&" beg end))  
#+end_src

** AUCTex settings
#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-master nil) ; Query for master file.
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
#+end_src

** GUD with Netcoredbg
#+begin_src emacs-lisb
  (setq gud-netcoredbg-command-name "netcoredbg --interpreter=vscode")

#+end_src

** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+end_src

** Orgmode code block languages
#+begin_src emacs-lisp
    ;; (advice-remove 'org-babel-do-load-languages #'ignore)
  ;;  (add-to-list 'org-src-lang-modes '("jupyter" . python))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((haskell . t)
       (sql . t)
       (shell . t)
       (python . t)
       (jupyter . t)

      ;; ... other languages you might have
       ))
       (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+end_src

#+RESULTS:

** Org-babel jupyter
#+begin_src emacs-lisp
  (use-package jupyter
    :ensure t)
#+end_src

#+RESULTS:

** Orgmode fsharp literate programming
#+begin_src emacs-lisp
  (defun org-babel-execute:fsharp (body params)
  (let* ((command (concat "echo '" body "' | dotnet fsi --nologo | grep 'val it:.* =' | sed 's/^.*= //'"))
         (result (string-trim (shell-command-to-string command))))
    result))

  (defun org-babel-execute:fsharp (body params)
    (let* ((command (concat "echo '" body "' | dotnet fsi"))
           (result (string-trim (shell-command-to-string command))))
      result))
  #+end_src

#+begin_src emacs-lisp
  ;; (use-package ob-fsharp
  ;;   :straight t
  ;;   :config
  ;;   (add-to-list 'org-babel-load-languages '(fsharp . t)))
#+end_src

** Org tempo
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
 
** Orgmode directory
#+begin_src emacs-lisp
      (custom-set-variables
        '(org-directory "~/Sync/orgmode")
        '(org-agenda-files '("~/Sync/orgmode/gtd/inbox.org"
                             "~/Sync/orgmode/gtd/next.org"
                             "~/Sync/orgmode/gtd/tickler.org"
                             "~/Sync/orgmode/gtd/projects/")))

  (setq org-agenda-files '("~/Sync/orgmode/gtd/inbox.org"
                           "~/Sync/orgmode/gtd/next.org"
                           "~/Sync/orgmode/gtd/tickler.org"
                           "~/Sync/orgmode/gtd/projects/"))

  (setq org-refile-targets '(("~/Sync/orgmode/gtd/next.org" :maxlevel . 3)
                             ("~/Sync/orgmode/gtd/someday.org" :level . 1)
                             ("~/Sync/orgmode/gtd/inbox.org" :level . 1)
                             ("~/Sync/orgmode/gtd/archive.org" :level . 1)
                             ("~/Sync/orgmode/gtd/tickler.org" :maxlevel . 2)
                             ("~/Sync/orgmode/gtd/projects/" :maxlevel . 2)))

  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/Sync/orgmode/gtd/inbox.org" "Inbox")
                                 "* %i%?\n")
                                ("T" "Tickler" entry
                                 (file+headline "~/Sync/orgmode/gtd/tickler.org" "Tickler")
                                 "* %i%? \n %U")))

  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
  #+end_src

  #+RESULTS:
  | sequence | TODO(t) | IN-PROGRESS(i) | WAITING(w) |   |   | DONE(d) | CANCELED(c) |
 
** Orgmode persistent clocking work time
#+begin_src emacs-lisp
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)

    (setq org-timer-default-timer 25)
;  Doesn't work :(
;  (add-hook 'org-clock-in-hook (lambda ()
;        (org-timer-set-timer '(25))))
#+end_src

** Orgmode indentation
#+begin_src emacs-lisp
  (defun my-org-mode-hook ()
    (org-indent-mode t))
  (add-hook 'org-mode-hook 'my-org-mode-hook)
#+end_src

** Orgmode gnuplot
#+begin_src emacs-lisp
  (use-package gnuplot
    :ensure t)
  (use-package gnuplot-mode
    :ensure t)
#+end_src

** Orgmode latex preview
To call latex preview, press /C-c C-x C-l/.
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 4))
#+end_src

** Ormode babel code block execute without confirmation
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Don't show startup message
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
  #+END_SRC

** Don't show scroolbar
  #+BEGIN_SRC emacs-lisp
    (toggle-scroll-bar -1) 
  #+END_SRC

** Don't show toolbar
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1) 
  #+END_SRC

** Don't show menu
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1) 
  #+END_SRC

** Show matching parenthesis
  #+BEGIN_SRC emacs-lisp
    (show-paren-mode 1)
  #+END_SRC

** Delete selection
  #+BEGIN_SRC emacs-lisp
    (delete-selection-mode 1)
  #+END_SRC

** Highlight cursor line
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode +1)
  #+END_SRC

** Display line number when programming
  #+BEGIN_SRC emacs-lisp
    (global-display-line-numbers-mode t)
    (defun my-relative-line-numbers-hook ()
      (setq display-line-numbers 'relative))

    (add-hook 'display-line-numbers-mode-hook 'my-relative-line-numbers-hook)
  #+END_SRC

** Different file backup directory - do not save backups in the same location as a file
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.emacs_saves")))
    (setq vc-make-backup-files t)
  #+END_SRC

* UI

** Setup font and its size
Allows to scale text
  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil :font "Iosevka Nerd Font-34")
    
;;    (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font-22")
;;    (set-face-attribute 'default nil :font "DejaVu Sans Mono-28")
  #+END_SRC

** Theme
  #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :ensure t
       :config
       (load-theme 'doom-earl-grey t)
       (doom-themes-visual-bell-config))
  #+END_SRC

** Modeline
  #+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))
  #+END_SRC

** Icons
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :ensure t)
  #+END_SRC
  
** Wrap long lines
#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src


* Modes

** Ido mode (interactive do - basically a tab-completion)
  #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC

** Helm
#+begin_src emacs-lisp
  (use-package helm
    :ensure t)
#+end_src

** Nix mode
  #+begin_src emacs-lisp
    (use-package nix-mode
      :ensure t
    )
  #+end_src

* General packages

** Setup MELPA packages
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (package-initialize)
  #+END_SRC

** Key popup help
Which key package pops up options in mini-buffer after button is pressed
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC

** Org-bullets
  #+begin_src emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )
  #+end_src

** Restclient
  #+begin_src emacs-lisp
    (use-package restclient
      :ensure t
    )
  #+end_src
  
** Orgroam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Sync/orgmode/notes")
    (setq org-roam-dailies-directory "journal/")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point)
	   :map org-roam-dailies-map
	   ("Y" . org-roam-dailies-capture-yesterday)
	   ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))
#+end_src

** Protobuf-mode
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :ensure t)

#+end_src

** Fsharp mode
#+begin_src emacs-lisp
  (use-package fsharp-mode
    :defer t
    :ensure t)

#+end_src

** Go mode
#+begin_src emacs-lisp
  (use-package go-mode
    :defer t
    :ensure t)
  (add-hook 'go-mode-hook #'eglot-ensure)
#+end_src

** Csharp mode
#+begin_src emacs-lisp
  (use-package csharp-mode
    :defer t
    :ensure t)
  (add-hook 'chsarp-mode-hook #'eglot-ensure)
;;  (add-to-list 'eglot-server-programs
;;               `(csharp-mode . ("OmniSharp" "-lsp")))
#+end_src

** Clojure mode
#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t)

#+end_src

** Elm mode
#+begin_src emacs-lisp
  (use-package elm-mode
    :ensure t)
  (add-hook 'elm-mode-hook 'elm-format-on-save-mode)
#+end_src

#+RESULTS:
| elm-format-on-save-mode | elm-indent-mode |

** Csv mode
#+begin_src emacs-lisp
  (use-package csv-mode
    :ensure t
  )
#+end_src

#+RESULTS:

** Ledger mode
#+begin_src emacs-lisp
  (use-package ledger-mode
    :ensure t
    :init
    :config
    (setq ledger-reports
      '(("cashflow" "ledger -f %(ledger-file) --cost -X EUR bal ^Income ^Expenses")
        ("cashflow-rsd" "ledger -f %(ledger-file) --cost -X RSD bal ^Income ^Expenses")
        ("net-worth" "ledger -f %(ledger-file) --cost -X EUR bal ^Assets ^Liabilities")
        ("net-worth-rsd" "ledger -f %(ledger-file) --cost -X RSD bal ^Assets ^Liabilities")
        ("prices" "ledger prices -f %(ledger-file)")
        ("bal" "%(binary) -f %(ledger-file) --cost -X EUR bal")
        ("bal-rsd" "%(binary) -f %(ledger-file) --cost -X RSD bal")
        ("reg" "%(binary) -f %(ledger-file) --cost -X EUR reg")
        ("reg-rsd" "%(binary) -f %(ledger-file) --cost -X RSD reg")
        ("payee" "%(binary) -f %(ledger-file) --cost -X EUR reg @%(payee)")
        ("payee-rsd" "%(binary) -f %(ledger-file) --cost -X RSD reg @%(payee)")
        ("account" "%(binary) -f %(ledger-file) --cost -X EUR reg %(account)")  
        ("account-rsd" "%(binary) -f %(ledger-file) --cost -X RSD reg %(account)")))  
    )    
#+end_src

#+RESULTS:
: t

